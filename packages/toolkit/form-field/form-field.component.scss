/// ============================================================================
/// THEMING ARCHITECTURE
/// ============================================================================
/// Uses semantic layering with property derivation:
/// 1. Design tokens (internal, prefixed --_field-*) - Base colors, spacing, typography
/// 2. Semantic color scale (public API, --ngx-form-field-color-*) - Brand/state colors
/// 3. Component-specific properties (public API, --ngx-form-field-*) - Specific use cases
/// 4. Component implementation - Uses layer 2/3 with fallbacks to layer 1
///
/// Example derivation chain:
/// --_field-clr-primary (#3b82f6)
///   ↓ derives to
/// --ngx-form-field-color-primary (themeable semantic color)
///   ↓ derives to
/// --ngx-form-field-focus-color (specific use case)
///   ↓ used in
/// input:focus { border-color: var(--_focus-color); }
///
/// Benefits:
/// - Easy theming: Change semantic colors, update entire appearance
/// - Clear semantics: Purpose-based property names (primary/error vs clr-primary/clr-danger)
/// - Automatic consistency: All uses of "primary" color stay in sync
/// - Encapsulation: Private tokens can change without breaking public API
/// ============================================================================

// ============================================================================
// DESIGN TOKENS (Internal - used as fallback defaults)
// ============================================================================
// Pseudo-private properties (--_field-*) provide sensible defaults.
// Override component semantics (--ngx-form-field-*) for theming.

:host {
  // Color tokens
  --_field-clr-primary: #3b82f6; // Blue - focus states
  --_field-clr-danger: #ef4444; // Red - invalid states
  --_field-clr-text: #1f2937; // Dark gray - main text
  --_field-clr-text-muted: #6b7280; // Medium gray - placeholders
  --_field-clr-text-subtle: rgba(
    71,
    91,
    119,
    0.75
  ); // Light gray - outlined labels
  --_field-clr-surface: #ffffff; // White - backgrounds
  --_field-clr-border: #d1d5db; // Light gray - borders
  --_field-clr-disabled: #f3f4f6; // Very light gray - disabled bg

  // Spacing scale (rem-based for accessibility)
  --_field-space-xs: 0.125rem; // 2px
  --_field-space-sm: 0.25rem; // 4px
  --_field-space-md: 0.5rem; // 8px
  --_field-space-lg: 0.75rem; // 12px
  --_field-space-xl: 1rem; // 16px

  // Typography scale
  --_field-text-xs: 0.75rem; // 12px - outlined label
  --_field-text-sm: 0.875rem; // 14px - default label/input
  --_field-text-base: 1rem; // 16px - large input

  // Other tokens
  --_field-radius: 0.25rem; // Border radius
  --_field-opacity-disabled: 0.6; // Disabled opacity
}

// ============================================================================
// SEMANTIC COLOR SCALE (Public API - brand/state colors)
// ============================================================================
// High-level semantic colors that map to design tokens.
// Override these for brand theming.

:host {
  --_color-primary: var(
    --ngx-form-field-color-primary,
    var(--_field-clr-primary)
  );
  --_color-error: var(--ngx-form-field-color-error, var(--_field-clr-danger));
  --_color-text: var(--ngx-form-field-color-text, var(--_field-clr-text));
  --_color-text-muted: var(
    --ngx-form-field-color-text-muted,
    var(--_field-clr-text-muted)
  );
  --_color-surface: var(
    --ngx-form-field-color-surface,
    var(--_field-clr-surface)
  );
  --_color-border: var(--ngx-form-field-color-border, var(--_field-clr-border));
  --_color-disabled: var(
    --ngx-form-field-color-disabled,
    var(--_field-clr-disabled)
  );
}

// ============================================================================
// COMPONENT SEMANTICS (Public API - specific use cases)
// ============================================================================
// Purpose-specific properties that derive from semantic colors.
// Override these for fine-grained control.

:host {
  // Layout
  --_gap: var(--ngx-form-field-gap, var(--_field-space-md));
  --_margin-bottom: var(--ngx-form-field-margin, var(--_field-space-xl));

  // Label
  --_label-size: var(--ngx-form-field-label-size, var(--_field-text-sm));
  --_label-weight: var(--ngx-form-field-label-weight, 500);
  --_label-color: var(--ngx-form-field-label-color, var(--_color-text));

  // Input
  --_input-size: var(--ngx-form-field-input-size, var(--_field-text-sm));
  --_input-padding: var(
    --ngx-form-field-input-padding,
    var(--_field-space-md) var(--_field-space-lg)
  );
  --_input-color: var(--ngx-form-field-input-color, var(--_color-text));
  --_input-bg: var(--ngx-form-field-input-bg, var(--_color-surface));
  --_input-border-color: var(
    --ngx-form-field-border-color,
    var(--_color-border)
  );
  --_input-radius: var(--ngx-form-field-radius, var(--_field-radius));

  // States (derive from semantic colors)
  --_focus-color: var(--ngx-form-field-focus-color, var(--_color-primary));
  --_invalid-color: var(--ngx-form-field-invalid-color, var(--_color-error));
  --_disabled-bg: var(--ngx-form-field-disabled-bg, var(--_color-disabled));
  --_disabled-opacity: var(
    --ngx-form-field-disabled-opacity,
    var(--_field-opacity-disabled)
  );

  // Placeholder
  --_placeholder-color: var(
    --ngx-form-field-placeholder-color,
    var(--_color-text-muted)
  );
}

// ============================================================================
// STANDARD LAYOUT
// ============================================================================
// Default vertical layout with label above input.

:host {
  display: flex;
  flex-direction: column;
  gap: var(--_gap);
  margin-bottom: var(--_margin-bottom);
  width: 100%;
}

.ngx-signal-form-field__content {
  display: contents;
}

// Label
:host ::ng-deep label {
  font-size: var(--_label-size);
  font-weight: var(--_label-weight);
  color: var(--_label-color);
  margin-bottom: var(--_field-space-sm);
}

// Input, textarea, select
:host ::ng-deep input,
:host ::ng-deep textarea,
:host ::ng-deep select {
  font-size: var(--_input-size);
  color: var(--_input-color);
  padding: var(--_input-padding);
  border: 1px solid var(--_input-border-color);
  border-radius: var(--_input-radius);
  background-color: var(--_input-bg);
  transition:
    border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out;

  &:focus {
    outline: none;
    border-color: var(--_focus-color);
    box-shadow: 0 0 0 3px
      color-mix(in srgb, var(--_focus-color) 10%, transparent);
  }

  &[aria-invalid='true'] {
    border-color: var(--_invalid-color);
  }

  &:disabled {
    background-color: var(--_disabled-bg);
    cursor: not-allowed;
    opacity: var(--_disabled-opacity);
  }

  &::placeholder {
    color: var(--_placeholder-color);
  }
}

// ============================================================================
// OUTLINED LAYOUT
// ============================================================================
// Container-based input where label sits inside the border.
// Reuses the same semantic tokens, just applies them differently.

:host(.ngx-signal-forms-outline) {
  // Override gap for outlined layout
  --_gap: var(--_field-space-xs);
}

:host(.ngx-signal-forms-outline) .ngx-signal-form-field__content {
  display: flex;
  flex-direction: column;
  padding: var(--_input-padding);
  background-color: var(--_input-bg);
  border: 1px solid var(--_input-border-color);
  border-radius: var(--_input-radius);
  cursor: text;
  transition:
    border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out;
  min-height: var(--ngx-form-field-min-height, 3.5rem);
}

// Label inside container (smaller, subtle)
:host(.ngx-signal-forms-outline) ::ng-deep label {
  font-size: var(--_field-text-xs);
  font-weight: 400;
  color: var(--_field-clr-text-subtle);
  margin: 0 0 var(--_field-space-xs) 0;
  cursor: text;
}

// Required marker (automatic via :has() selector)
:host(.ngx-signal-forms-outline[data-show-required='true'])
  .ngx-signal-form-field__content:has([required])
  label::after,
:host(.ngx-signal-forms-outline[data-show-required='true'])
  .ngx-signal-form-field__content:has([aria-required='true'])
  label::after {
  content: attr(data-required-marker);
  color: var(--_invalid-color); // Reuse invalid color for required marker
  font-weight: 600;
}

// Remove input default styling (container provides all visual feedback)
:host(.ngx-signal-forms-outline) ::ng-deep input,
:host(.ngx-signal-forms-outline) ::ng-deep textarea,
:host(.ngx-signal-forms-outline) ::ng-deep select {
  border: none;
  background-color: transparent;
  padding: 0;
  margin: 0;
  width: 100%;
  font-size: var(--_input-size);
  color: var(--_input-color);
  outline: none; // Safe: container provides focus indicator
}

// Placeholder (slightly more subtle in outlined)
:host(.ngx-signal-forms-outline) ::ng-deep input::placeholder,
:host(.ngx-signal-forms-outline) ::ng-deep textarea::placeholder {
  color: color-mix(in srgb, var(--_placeholder-color) 75%, transparent);
}

// States using :has() selector (container feedback)
:host(.ngx-signal-forms-outline) .ngx-signal-form-field__content:has(:focus) {
  border-color: var(--_focus-color);
  box-shadow: 0 0 0 2px color-mix(in srgb, var(--_focus-color) 25%, transparent);
}

:host(.ngx-signal-forms-outline)
  .ngx-signal-form-field__content:has([aria-invalid='true']) {
  border-color: var(--_invalid-color);
}

:host(.ngx-signal-forms-outline)
  .ngx-signal-form-field__content:has([aria-invalid='true']:focus) {
  box-shadow: 0 0 0 2px
    color-mix(in srgb, var(--_invalid-color) 25%, transparent);
}

:host(.ngx-signal-forms-outline)
  .ngx-signal-form-field__content:has(:disabled) {
  background-color: var(--_disabled-bg);
  cursor: not-allowed;
  opacity: var(--_disabled-opacity);
}

:host(.ngx-signal-forms-outline) ::ng-deep :disabled {
  cursor: not-allowed;
}
